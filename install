#!/bin/bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: Thu Mar 30 12:55:46 CST 2017
# Module: docker
# Submodule: 
# Command: install
###############################################################################

source "${HI_CLI_HOME}/bin/colors"
source "${HI_CLI_HOME}/bin/clap"
source "${HI_CLI_HOME}/bin/logging"
source "${HI_CLI_HOME}/bin/disk/format"
###############################################################################

function remove_docker() {
  log_info "disable docker service"
  systemctl stop docker
  systemctl disable docker.service

  # remove previous version
  if [ $(rpm -qa | grep container-selinux-1.10.3-59.el7.centos.x86_64 | wc -l ) != 0 ]; then
    yum -y remove container-selinux-1.10.3-59.el7.centos.x86_64
  fi

  if [ $(find /dev/mapper/ -name "*docker*" | wc -l) != 0 ]; then
    find /dev/mapper/ -name "*docker*" | xargs lvremove -v -f
  fi

  if [ $(vgdisplay | grep docker | wc -l) != 0 ]; then
    vgremove -f docker
  fi

  if [ $(pvdisplay | grep "${storage}${partition}" | wc -l) != 0 ]; then
    pvremove -f ${storage}${partition}
  fi

  if [ "$umount" == "umount" ] || [ "$all" == "all" ]; then
    mount_point=$(df -h | grep ${storage}${partition} | awk '{print $6}')
    if [ "$mount_point" != "" ]; then
      umount $mount_point
    fi
  fi

  rm -rf /var/lib/docker
  rm -rf /run/docker*
  rm -rf /var/run/docker

  log_info "removing docker ..."
  yum list installed | grep docker | awk -v N=1 '{print $N}' | xargs yum -y remove
  log_info "docker was removed"
}

function add_docker_repo() {

  if [ $(cat /etc/yum.repos.d/docker.repo | grep "mirrors.tuna.tsinghua.edu.cn" | wc -l) == 0 ]; then

  cat > /etc/yum.repos.d/docker.repo <<_EOF_

[dockerrepo]
name=Docker Repository
baseurl=https://mirrors.tuna.tsinghua.edu.cn/docker/yum/repo/centos7
enabled=1
gpgcheck=1
gpgkey=https://mirrors.tuna.tsinghua.edu.cn/docker/yum/gpg

_EOF_

  fi
}

function setup_docker_storage() {

if [ $(cat /etc/sysconfig/docker-storage-setup | grep "VG=docker" | wc -l) == 0  ]; then

  cat > /etc/sysconfig/docker-storage-setup <<_EOF_
VG=docker
SETUP_LVM_THIN_POOL=yes
DATA_SIZE=${percentage}%FREE

_EOF_

fi # if [ $(cat /etc/sysconfig/docker-storage-setup | grep docker | wc -l) == 0  ]; then


}


function config_docker_options() {

mkdir -p /etc/systemd/system/docker.service.d/

if [ "$force" == "force" ]; then
  echo "" > /etc/systemd/system/docker.service.d/override.conf
fi

if [ $(cat /etc/systemd/system/docker.service.d/override.conf | grep "/dev/mapper/docker-thinpool" | wc -l) == 0  ]; then

  cat > /etc/systemd/system/docker.service.d/override.conf <<_EOF_

[Service]
ExecStart=
ExecStart=/usr/bin/docker daemon --storage-driver=devicemapper --storage-opt=dm.thinpooldev=/dev/mapper/docker-thinpool --storage-opt dm.use_deferred_removal=true --selinux-enabled --insecure-registry 172.30.0.0/16 $config

_EOF_
  if [ "$registrymirror" != "" ]; then
    cp config/daemon.json /etc/docker/
  fi

  systemctl daemon-reload

fi
}

function install_docker_default() {
  rm -rf /etc/systemd/system/docker.service.d/override.conf

  log_info "install docker"

  yum -y install docker

  setup_docker_storage

  sed -i '/OPTIONS=.*/c\OPTIONS="--selinux-enabled --log-driver=json-file --log-opt max-size=50m --registry-mirror=https://jtt7lvye.mirror.aliyuncs.com"' /etc/sysconfig/docker
  sed -i '/INSECURE_REGISTRY=.*/c\INSECURE_REGISTRY="--selinux-enabled "' /etc/sysconfig/docker

  systemctl stop docker

  rm -rf /var/lib/docker

  /usr/bin/docker-storage-setup
}


function install_docker_engine() {
  log_info "install docker-engine"
  add_docker_repo
  if [ "$ver" == "" ]; then
    yum -y install docker-engine
  else
    yum -y install docker-engine-selinux-$ver
    yum -y install docker-engine-$ver
  fi
  systemctl enable docker.service
  systemctl start docker

  lvcreate --wipesignatures y -n thinpool docker -l ${percentage}%VG
  lvcreate --wipesignatures y -n thinpoolmeta docker -l 1%VG

  lvconvert -y --zero n -c 512K --thinpool docker/thinpool --poolmetadata docker/thinpoolmeta

  echo "activation {\n    thin_pool_autoextend_threshold=80\n    thin_pool_autoextend_percent=20\n}" > /etc/lvm/profile/docker-thinpool.profile

  lvchange --metadataprofile docker-thinpool docker/thinpool

  config_docker_options

  systemctl stop docker
  rm -rf /var/lib/docker

}

function run() {
  echo "-------------------------------------------------------------------------"
  log_info "main loop ..."

  echo $CMD_LINE

  if [ "$percentage" == "" ]; then
    percentage=98
  fi

  if [ "$storage" == "" ]; then
    storage=/dev/sdb
  fi
  if [ "$partition" == "" ]; then
    partition=1
  fi

  if [ "$remove" == "remove" ]; then
    remove_docker
    exit
  fi

  if [ "$config" != "" ]; then
    log_info "configure docker"
    echo "" > /etc/systemd/system/docker.service.d/override.conf
    config_docker_options
    systemctl daemon-reload
    systemctl restart docker
    docker info
    exit
  fi


  if [ $(lsblk | grep ${storage##*/} | wc -l) == 0 ]; then
    log_info "${storage} is not exist!"
    exit
  fi

  if [ $(vgdisplay | grep docker | wc -l) == 0 ] || [ "$all" == "all" ]; then

    log_info "setup direct disk mode"
    echo "-------------------------------------------------------------------------"
    if [ "$new" == "new" ]; then
      log_info "formating disk ..."  
      format_disk $storage
    fi

    if [ "$partition" == "" ]; then
      partition=1
    fi

    if [ "$update" == "update" ]; then 
      yum -y update
      yum makecache
    fi

    yum install -y epel-release
    yum install -y python-cryptography pyOpenSSL.x86_64 lvm2

    remove_docker

    log_info "create pv and vg"
    y | pvcreate -ff ${storage}${partition}
    y | vgcreate docker ${storage}${partition}

    if [ "$ver" == "" ]; then
      log_info "trying to install docker"
      install_docker_default
    else
      log_info "trying to install docker engine"
      install_docker_engine
    fi

    lvs -o+seg_monitor

  fi # if [ $(vgdisplay | grep docker | wc -l) == 0 ]; then

  log_info "reload docker.service"
  systemctl daemon-reload

  log_info "enable docker.service"
  systemctl enable docker.service

  log_info "start docker.service"
  systemctl start docker

  if [ "$?" != 0 ]; then
    log_info "Failed to start docker"
    exit
  fi

  log_info "show docker info"
  docker info
  result=$?

  cli="$(docker -v) is installed"

  eval $1="\${result}"
  eval $2="\${cli}"
}
###############################################################################
