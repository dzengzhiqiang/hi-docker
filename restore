#!/usr/bin/env bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: Thu Mar 30 12:55:46 CST 2017
# Module: docker
# Submodule: 
# Command: install
###############################################################################
source "${HI_CLI_HOME}/bin/colors"
source "${HI_CLI_HOME}/bin/clap"
source "${HI_CLI_HOME}/bin/logging"
###############################################################################

function action()
{
  host=$1
  image=$2
  image_tag=$3
  age=$4
  image_id=$5

   if [ "${pull}" != "" ]; then
      echo "docker pull ${image}:${image_tag}"
   elif [ "${push}" != "" ]; then
      echo "${host} ${image}:${image_tag} ${image_id}"  
   fi
}

function run() {

  # log_info "start ..."
  # log_info "========="
  echo ""

  cli="hi docker restore"

  log_debug "declare map ..."

  declare -A units=(["seconds"]=1 ["minute"]=60 ["minutes"]=60 ["hour"]=3600 ["hours"]=3600 ["day"]=86400 ["days"]=86400 ["week"]=604800 ["weeks"]=604800 ["month"]=18144000 ["months"]=18144000  ["year"]=217728000 ["years"]=217728000 )
  declare -A images
  declare -A latest_images
  declare -A images

  log_debug "prepare variables ..."

  if [ "${registry}" == "" ]; then
    registry=docker-registry.default.svc:5000
  fi

  if [ "${new_registry}" == "" ]; then
    new_registry=${registry}
  fi

  if [ "${hosts}" == "" ]; then
    hosts=nodes
  fi

  # fill all images tag to a map
  item_size=$(hi ansible shell ${hosts} docker images | grep -v "\<none\>" | sed "s/ About //g" | sed "s/ ago //g" | sed "s/REPOSITORY//g" | sed "s/ TAG //g" | sed "s/ IMAGE ID //g" | sed "s/ CREATED //g" | sed "s/SIZE//g" | wc -l)
  log_debug "item_size: ${item_size}"
  prev_image=""
  i_host=0
  i_image=1
  i_tag=2
  i_age=3
  hi ansible shell ${hosts} docker images | grep -v "\<none\>" | sed "s/ About //g" | sed "s/ ago //g" | sed "s/REPOSITORY//g" | sed "s/ TAG //g" | sed "s/ IMAGE ID //g" | sed "s/ CREATED //g" | sed "s/SIZE//g" \
   | awk '{print $1 "\t" $2 "\t" $3 "\t" $4 "\t" $5}' | while read img t id time unit; do
    
    i_count=$((i_count + 1))

    time=${time/an/1}
    
    if [ "${id}" == "SUCCESS" ]; then
      log_debug "host: $img ============================"
      current_host=${img}
    elif [ ${#id} == 12 ] && [ "${unit}" != "" ] && [ "${units[$unit]}" != "" ] && [[ $(echo "${img}" | grep -P "${registry}") != "" ]]; then
      if [ "${tag}" == "" ] || [ "${tag}" == "${t}" ]; then
        # all images are added to images map
        age=$(( ${units[$unit]} * ${time} ))
        images+=(["${id}"]="${current_host} ${img} ${t} ${age}") 

        log_debug "=== ${id}: ${images[${id}]} ==="

        # add to latest_images if none of current image name is added
        if [[ ${latest_images[${img}]} == "" ]]; then
          latest_images+=([${img}]=${id})
        else
          # check the age, find the latest image and replace it
          saved_image_id=${latest_images[${img}]}
          log_debug "saved_image_id: ${saved_image_id}"
          log_debug "saved_images: ${images[${saved_image_id}]}"
          set -f
          saved_image=(${images[${saved_image_id}]})
        
          # for i in "${!saved_image[@]}"; do log_debug "$i=>${saved_image[i]}"; done

          saved_image_age=${saved_image[${i_age}]}
          log_debug "${age} vs ${saved_image_age}"
          if (( ${age} < ${saved_image_age} )) ; then
            # replace latest image
            latest_images[${img}]=${id}
            log_debug "replaced image ${img}:${t} with id: ${id}"
          else
            log_debug "skipped image ${img}"
          fi
        fi
      fi
    fi

    if (( $i_count == $item_size )); then
      log_info "restored below images ..."
      echo ""
      for i in "${!latest_images[@]}"
      do
        id=${latest_images[${i}]}
        action ${images[${id}]} ${id}
      done
    fi
  done

  result=$?

  # echo ""
  # log_info "========="
  # log_info "done ..."
  echo ""


  eval $1="\${result}"
  eval $2="\${cli}"
}
